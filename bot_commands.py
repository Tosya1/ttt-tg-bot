
from telegram import InlineKeyboardMarkup, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from processing import *

global board
global mark
global player
global keyboard
global keys
global game_on

marks = ['‚ùå', '‚≠ï']
mark = toss_mark(marks)
game_on = True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global game_on
    
    kb = [[KeyboardButton('–ù–æ–≤–∞—è –∏–≥—Ä–∞')],[KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É')],
    [KeyboardButton('–ü–æ–º–æ—â—å')]]
    reply_kb = ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True)
    if update.message.text == '–ù–æ–≤–∞—è –∏–≥—Ä–∞' or update.message.text == '/new_game':
        await new_game(update, context)
    elif update.message.text == '–ü–æ–º–æ—â—å' or update.message.text == '/help':
        await help(update, context)
    elif update.message.text == '/start':
        await update.message.reply_text(f'{update.effective_user.first_name}, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–∞ "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ üëã"',reply_markup=reply_kb)
    elif update.message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É'or update.message.text == '/close':
        await update.message.reply_text(f'{update.effective_user.first_name} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∏–≥—Ä—ã üíî\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.')
        game_on = False
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.')

async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global player
    global players
    global mark 
    global board
    global keyboard
    global keys
    global game_on
    game_on = True
    players = [update.effective_user.first_name, 'Bot']
    player = toss_player(players)
    board = get_board()
    keys = get_keys_text(board, marks)
    keyboard = draw_board(board, keys)
    reply_markup = InlineKeyboardMarkup(keyboard)
    if player == 'Bot':
        await bot(update, context)
    else:
        await update.message.reply_text(f'{player}, –≤—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å {mark}', reply_markup=reply_markup)

async def bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global player
    global players
    global mark 
    global board
    global keyboard
    global keys
    global game_on
    
    strike = bot_strike(board, marks)
    board = update_board(board, strike, mark)
    keys = get_keys_text(board, marks)
    keyboard = draw_board(board, keys)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_chat.send_message(f'{player} –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç {mark} —è—á–µ–π–∫—É: {strike}', reply_markup=reply_markup)
    if check_win(board) == True:
        await update.effective_chat.send_message(text=f"–ü–æ–±–µ–∂–¥–∞–µ—Ç {player}! üèÜ")
        await update.effective_chat.send_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        game_on = False
    elif check_draw(board, marks) != True:
        await update.effective_chat.send_message(text=f"–ù–∏—á—å—è! ü§ù")
        await update.effective_chat.send_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        game_on = False
    mark =  marks[marks.index(mark) -1]
    player =  players[players.index(player) -1]


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global mark
    global player
    global players
    global board
    global keyboard
    global keys
    global game_on

    if game_on == True:
        strike = update.callback_query.data
        board = update_board(board, strike, mark)
        keys = get_keys_text(board, marks)
        keyboard = draw_board(board, keys)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.answer()
        await update.effective_chat.send_message(text=f"{player} –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç {mark} –≤ —è—á–µ–π–∫—É: {strike}", reply_markup=reply_markup)
        if check_win(board) == True:
            await update.effective_chat.send_message(text=f"–ü–æ–±–µ–∂–¥–∞–µ—Ç {player}! üèÜ" )
            await update.effective_chat.send_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            game_on = False
        elif check_draw(board, marks) != True:
            await update.effective_chat.send_message(text=f"–ù–∏—á—å—è! ü§ù")
            await update.effective_chat.send_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            game_on = False
        else:
            mark =  marks[marks.index(mark) -1]
            player =  players[players.index(player) -1]
            await bot(update, context)
    else:
        await update.callback_query.answer(text = '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.')


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚úçÔ∏è–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.\n1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å ‚ùå, –∞ –∫—Ç–æ ‚≠ï, –∞ —Ç–∞–∫–∂–µ –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É.\n2. –ò–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç —Å–≤–æ—é –º–µ—Ç–∫—É (‚ùå –∏–ª–∏ ‚≠ï) –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É.\n3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ö–æ–¥–∞ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Ç–∫—É –≤ —É–∂–µ –∑–∞–Ω—è—Ç—É—é —è—á–µ–π–∫—É.\n4. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–∏–ª —Ç—Ä–∏ –º–µ—Ç–∫–∏ –≤ —Ä—è–¥, –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–Ω–∏—á—å—é.\n–ò—Å–ø–æ–ª—å–∑—É—Ç–µ /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")